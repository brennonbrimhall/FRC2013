// RobotBuilder Version: 0.0.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package org.usfirst.frc20.SensorBoard.commands;

import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.Jaguar;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc20.SensorBoard.RobotMap;

/**
 *
 */
public class  Turn180 extends Command {
    Gyro gyro;
    RobotMap driveTrainObjects;//the mapping object so we can mess with the 
    Jaguar topRight, topLeft, bottomLeft, bottomRight;
    double speed;
    public Turn180() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
        //all these intiations are from the RobotMap class
        driveTrainObjects = new RobotMap();
        gyro = driveTrainObjects.getGyro();
        topRight = driveTrainObjects.getTopRightJag();
        topLeft = driveTrainObjects.getTopLeftJag();
        bottomRight = driveTrainObjects.getBottomRightJag();
        bottomLeft = driveTrainObjects.getBottomLeftJag();
    }
    //sets the speed at which the robot turns very important
    public double findArcLength(){
        
    }
    public void setSpeed(double speed){
        this.speed = speed;
    }
    public void findAngularSpeed(){
        
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        gyro.reset();
        double angle = Math.PI;
        topRight.set(speed);
            bottomRight.set(speed);
            bottomLeft.set(-speed);
            topLeft.set(-speed);
            findAngularSpeed();
        while (angle >= gyro.getAngle()){    
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }
        topRight.set(0);
            bottomRight.set(0);
            bottomLeft.set(0);
            topLeft.set(0);
    }
    public void findAngularSpeed(double angle){
        
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
        //TODO delete this code below
        System.out.println("Hurray!"); 
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
